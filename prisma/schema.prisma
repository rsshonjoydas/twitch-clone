datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  username        String      @unique
  imageUrl        String
  externalUserId  String      @unique
  bio String?

  following       Follow[]    @relation("Following")
  followedBy      Follow[]    @relation("FollowedBy")

  blocking        Block[]     @relation("Blocking")
  blockedBy       Block[]     @relation("BlockedBy")

  stream          Stream?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Stream {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  name                  String 
  thumbnailUrl          String? 

  ingressId             String?
  serverUrl             String?
  streamKey             String?

  isLive                Boolean     @default(false)
  isChatEnabled         Boolean     @default(true)
  isChatDelayed         Boolean     @default(false)
  isChatFollowersOnly   Boolean     @default(false)

  userId                String      @db.ObjectId @unique
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ingressId])
  @@fulltext([name])
}

model Follow {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  followerId      String      @db.ObjectId
  followingId     String      @db.ObjectId

  follower        User        @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following       User        @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  blockerId       String      @db.ObjectId
  blockedId       String      @db.ObjectId

  blocker         User        @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked         User        @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}